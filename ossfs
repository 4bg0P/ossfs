#!/usr/bin/env perl

use strict;
use warnings;

use POSIX;
use Errno qw(:POSIX);
use Fcntl ':mode';
use HTTP::Date;
use Fuse;
use Getopt::Long;

push @INC, ".";
use OSS;

my $oss;

my $access_id = undef;
my $access_key = undef;

my %buckets = ();
my $bucket = "";

my $uid = $<;
my ($gid) = split / /, $(;

my %acl = ("private" => 0770,
           "public-read" => 0775,
           "public-read-write" => 0777);
my $create = "private"; # default create acl

my $debug = 0;
my $bucket_mode;
my $bucket_time;

my %wbuf;

# file to object, remove leading "/" of input string
sub f2o {
    my $str = shift;
    $str =~ s#^/+##;
    return $str;
}

sub oss_dummy { 0; }

sub oss_getattr {
    my $file = shift @_;
    if ($file eq "/") {
        return (0, 0, S_IFDIR | $bucket_mode, 1, $uid, $gid, 0, 0,
                $bucket_time,
                $bucket_time,
                $bucket_time, 0, 0);
    }
    # try if is file
    my ($ret, $time, $size) = $oss->HeadObject($bucket, f2o($file));
    if ($ret) {
        return (0, # dev
                0, # inode
                S_IFREG | $bucket_mode, # mode
                1, # nlink
                $uid,
                $gid,
                0, # rdev
                $size, # size
                str2time($time), # atime
                str2time($time), # mtime
                str2time($time), # ctime
                0, # blksize
                $size / 512); # blocks
    }
    # try if is dir
    ($ret, $time, $size) = $oss->HeadObject($bucket, f2o("$file/"));
    if ($ret) {
        return (0, # dev
                0, # inode
                S_IFDIR | $bucket_mode, # mode
                1, # nlink
                $uid,
                $gid,
                0, # rdev
                $size, # size
                str2time($time), # atime
                str2time($time), # mtime
                str2time($time), # ctime
                0, # blksize
                $size / 512); # blocks
    }
    # ok, file seems not exist
    return -ENOENT();
}

sub oss_mknod {
    my ($file, $mode, $dev) = @_;
    # TODO: file already exist?
    my $ret = $oss->PutObject($bucket, f2o($file), "");
    return 0 if ($ret);
    return -ENOENT();
}

sub oss_mkdir {
    my ($file, $mode) = @_;
    # TODO: dir already exist?
    my $ret = $oss->PutObject($bucket, f2o("$file/"), "");
    return 0 if ($ret);
    return -ENOENT();
}

sub oss_getdir {
    my $file = shift @_;
    my %param = ( "delimiter" => "/" );
    $param{"prefix"} = f2o("$file/");
    my ($ret, @list) = $oss->GetBucket($bucket, %param);
    return (@list, 0) if ($ret);
    return -ENOENT(); # TODO
}

sub oss_unlink {
    my $file = shift @_;
    my $ret = $oss->DeleteObject($bucket, f2o($file));
    return 0 if ($ret);
    # TODO: no such file
    # TODO: is a dir?
    return -ENOENT();
}

sub oss_rmdir {
    my $file = shift @_;
    # TODO: delete a whole tree
    my $ret = $oss->DeleteObject($bucket, f2o("$file/"));
    return 0 if ($ret);
    return -ENOENT();
}

sub oss_rename {
    my ($old, $new) = @_;
    my $ret = $oss->CopyObject($bucket, f2o($old), $bucket, f2o($new));
    return -ENOENT() unless ($ret);
    return unlink($old);
}

sub oss_open {
    my ($file, $flags, $fi_ref) = @_;
    # store file size for reading
    my ($ret, $time, $size) = $oss->HeadObject($bucket, f2o($file));
    if ($ret) {
        # file already exists
        # store file size for calc end in oss_read
        $$fi_ref{"filesize"} = $size;
    } else {
        # file not exist, create an empty one if necessary
        # TODO: refer to $flags here
        $ret = $oss->PutObject($bucket, f2o($file), "");
        $$fi_ref{"filesize"} = 0;
        return -EIO() unless ($ret);
    }
    return (0, $fi_ref);
}

sub oss_read {
    my ($file, $size, $offset, $fi_ref) = @_;
    my $end = $offset + $size - 1;
    $end = $$fi_ref{"filesize"} - 1
        if ($fi_ref and exists($$fi_ref{"filesize"})
            and $end >= $$fi_ref{"filesize"});
    my $content = $oss->GetObject($bucket, f2o($file), $offset, $end);
    return $content if (defined($content));
    return -ENOENT();
}

sub oss_write {
    my ($file, $buffer, $offset, $fi_ref) = @_;
    # create a write buffer if necessary
    $wbuf{$file} = "" unless (exists $wbuf{$file});
    my $len = length $wbuf{$file};
    # to prevent hole in file
    if ($offset > $len) {
        $wbuf{$file} .= '\0' x ($offset - $len);
    }
    $len = length $buffer;
    substr($wbuf{$file}, $offset, $len, $buffer);
    return $len;
}

sub oss_release {
    my ($file, $flags, $fi_ref) = @_;
    my $ret = 0;
    if (exists $wbuf{$file}) {
        $ret = $oss->PutObject($bucket, f2o($file), $wbuf{$file});
        delete $wbuf{$file};
    }
    # undef %$fi_ref;
    return $ret ? 0 : -EIO();
}

sub oss_create {
    my ($file, $flags) = @_;
    my $fi_ref = {};
    return oss_open($file, $flags, $fi_ref);
}

sub oss_ftruncate {
    my ($file, $offset, $fi_ref) = @_;
    if (exists $wbuf{$file}) {
        my $len = length $wbuf{$file};
        if ($offset > $len) {
            $wbuf{$file} .= '\0' x ($offset - $len);
        } elsif ($offset < $len) {
            $wbuf{$file} = substr($wbuf{$file}, 0, $offset);
        }
    }
    return 0;
}

sub print_usage {
    print <<EOF;
usage: $0 [options] mountpoint
options:
    -u --unmount  unmount in lazy mode
    -b --bucket   specify bucket name
    -c --create   indicate ossfs to create one if bucket specified by -b
                  does not exist, with specified acl (private, public-read
                  or public-read-write), default $create
                  if the bucket existed, do noting
    -h --help     print this usage
    -d --debug    debug mode
    -i --id       specify access id
    -k --key      specify access key
    -f --file     speficy a file, which contains access id/key
EOF
;
}

my $unmount = 0;
my $file;
GetOptions("u|unmount" => \$unmount,
           "b|bucket=s" => \$bucket,
           "c|create:s" => \$create,
           "h|help" => sub { &print_usage(); exit 0; },
           "d|debug" => \$debug,
           "i|id=s" => \$access_id,
           "k|key=s" => \$access_key,
           "f|file=s" => \$file)
    or exit 1;

my $mountpoint = shift @ARGV;
unless ($mountpoint) {
    print STDERR "mountpoint not specified.\n";
    &print_usage();
    exit 1;
}

if ($file) {
    open FILE, "<", $file or die "$!: $file\n";
    chomp($access_id = <FILE>);
    chomp($access_key = <FILE>);
    close FILE;
}

die "empty access id\n" unless ($access_id);
die "empty access key\n" unless ($access_key);

$oss = OSS->new($access_id, $access_key);

# get all buckets
(undef, %buckets) = $oss->ListBucket();
# create a bucket if necessary
if (!exists($buckets{$bucket}) and $create) {
    die "failed to create bucket $bucket\n"
        unless ($oss->PutBucketACL($create));
    # refresh buckets
    (undef, %buckets) = $oss->ListBucket();
}

# for current bucket
$bucket_time = $buckets{$bucket};
$bucket_mode = $oss->GetBucketACL($bucket);
die unless exists $acl{$bucket_mode};
$bucket_mode = $acl{$bucket_mode};

if ($unmount) {
    exec("fusermount", "-u", "-z", $mountpoint);
}

# unmount first
if ($debug) {
    system("fusermount -u -z $mountpoint");
}

Fuse::main( mountpoint => $mountpoint,
            debug => \$debug,

            getattr => "main::oss_getattr",
            readlink => "main::oss_dummy",
            getdir => "main::oss_getdir",
            mknod => "main::oss_mknod",
            mkdir => "main::oss_mkdir",
            unlink => "main::oss_unlink",
            rmdir => "main::oss_rmdir",
            symlink => "main::oss_dummy",
            rename => "main::oss_rename",
            link => "main::oss_dummy",
            chmod => "main::oss_dummy",
            chown => "main::oss_dummy",
            truncate => "main::oss_dummy",
            # utime => "main:oss_dummy", # deprecated
            open => "main::oss_open",
            read => "main::oss_read",
            write => "main::oss_write",
            statfs => "main::oss_dummy",
            flush => "main::oss_dummy",
            release => "main::oss_release",
            fsync => "main::oss_dummy",
            setxattr => "main::oss_dummy",
            getxattr => "main::oss_dummy",
            listxattr => "main::oss_dummy",
            removexattr => "main::oss_dummy",
            opendir => "main::oss_dummy",
            # readdir => "main::oss_readdir",
            releasedir => "main::oss_dummy",
            fsyncdir => "main::oss_dummy",

            # init => "main::oss_dummy",
            # destory => "main::oss_dummy",

            access => "main::oss_dummy",
            create => "main::oss_create",
            ftruncate => "main::ftruncate",
            fgetattr => "main::oss_getattr",
            # lock => "main::oss_dummy",
            utimens => "main::oss_dummy",
            # bmap => "main::oss_dummy",
    );
